Index: Prior.cpp
===================================================================
--- Prior.cpp	(revision 16290)
+++ Prior.cpp	(working copy)
@@ -33,6 +33,8 @@
 #include "../../MMDevice/ModuleInterface.h"
 #include <sstream>
 
+static const int SLEEP_TIME = 10000;
+
 const char* g_XYStageDeviceName = "XYStage";
 const char* g_ZStageDeviceName = "ZStage";
 const char* g_NanoStageDeviceName = "NanoScanZ";
@@ -970,7 +972,7 @@
 
    return false;
 }
- 
+
 int XYStage::SetPositionSteps(long x, long y)
 {
    MMThreadGuard guard(lock_);
@@ -984,27 +986,52 @@
    command << "G," << x << "," << y;
 
    // send command
-   ret = SendSerialCommand(port_.c_str(), command.str().c_str(), "\r");
-   if (ret != DEVICE_OK)
-      return ret;
+   int tries = 0;
+   const int MAX_TRIES = 100;
+   while (tries++ < MAX_TRIES) {
+       ret = SendSerialCommand(port_.c_str(), command.str().c_str(), "\r");
+       if (ret != DEVICE_OK) {
+           std::ostringstream os;
+           os << "XYStage::SetPositionSteps G,x,y got ret code " << ret << ", trying again " << tries << "/" << MAX_TRIES;
+           LogMessage(os.str().c_str());
+           CDeviceUtils::SleepMs(SLEEP_TIME);
+           continue;
+       }
 
-   // block/wait for acknowledge, or until we time out;
-   std::string answer;
-   ret = GetSerialAnswer(port_.c_str(), "\r", answer);
-   if (ret != DEVICE_OK)
-      return ret;
+       // block/wait for acknowledge, or until we time out;
+       std::string answer;
+       ret = GetSerialAnswer(port_.c_str(), "\r", answer);
+       if (ret != DEVICE_OK) {
+           std::ostringstream os;
+           os << "XYStage::SetPositionSteps G,x,y response got ret code " << ret << ", trying again " << tries << "/" << MAX_TRIES;
+           LogMessage(os.str().c_str());
+           CDeviceUtils::SleepMs(SLEEP_TIME);
+           continue;
+       }
 
-   if (answer.substr(0,1).compare("R") == 0)
-   {
-      return DEVICE_OK;
+       if (answer.substr(0,1).compare("R") == 0)
+       {
+           return DEVICE_OK;
+       }
+       else if (answer.substr(0, 1).compare("E") == 0 && answer.length() > 2)
+       {
+           int errNo = atoi(answer.substr(2).c_str());
+           ret = ERR_OFFSET + errNo;
+           std::ostringstream os;
+           os << "XYStage::SetPositionSteps G,x,y response RE got ret code " << ret << ", trying again " << tries << "/" << MAX_TRIES;
+           LogMessage(os.str().c_str());
+           CDeviceUtils::SleepMs(SLEEP_TIME);
+           continue;
+       }
+       else {
+           ret = ERR_UNRECOGNIZED_ANSWER;   
+       }
+       std::ostringstream os;
+       os << "XYStage::SetPositionSteps G,x,y got unrecognized ret code " << ret << ", trying again " << tries << "/" << MAX_TRIES;
+       LogMessage(os.str().c_str());
+       CDeviceUtils::SleepMs(SLEEP_TIME);
    }
-   else if (answer.substr(0, 1).compare("E") == 0 && answer.length() > 2)
-   {
-      int errNo = atoi(answer.substr(2).c_str());
-      return ERR_OFFSET + errNo;
-   }
-
-   return ERR_UNRECOGNIZED_ANSWER;   
+   return ret;
 }
  
 int XYStage::SetRelativePositionSteps(long x, long y)
@@ -1020,27 +1047,52 @@
    command << "GR," << x << "," << y;
 
    // send command
-   ret = SendSerialCommand(port_.c_str(), command.str().c_str(), "\r");
-   if (ret != DEVICE_OK)
-      return ret;
+   int tries = 0;
+   const int MAX_TRIES = 100;
+   while (tries++ < MAX_TRIES) {
+       ret = SendSerialCommand(port_.c_str(), command.str().c_str(), "\r");
+       if (ret != DEVICE_OK) {
+           std::ostringstream os;
+           os << "XYStage::SetRelativePositionSteps GR,x,y got ret code " << ret << ", trying again " << tries << "/" << MAX_TRIES;
+           LogMessage(os.str().c_str());
+           CDeviceUtils::SleepMs(SLEEP_TIME);
+           continue;
+       }
 
-   // block/wait for acknowledge, or until we time out;
-   std::string answer;
-   ret = GetSerialAnswer(port_.c_str(), "\r", answer);
-   if (ret != DEVICE_OK)
-      return ret;
+       // block/wait for acknowledge, or until we time out;
+       std::string answer;
+       ret = GetSerialAnswer(port_.c_str(), "\r", answer);
+       if (ret != DEVICE_OK) {
+           std::ostringstream os;
+           os << "XYStage::SetRelativePositionSteps GR,x,y response got ret code " << ret << ", trying again " << tries << "/" << MAX_TRIES;
+           LogMessage(os.str().c_str());
+           CDeviceUtils::SleepMs(SLEEP_TIME);
+           continue;
+       }
 
-   if (answer.substr(0,1).compare("R") == 0)
-   {
-      return DEVICE_OK;
+       if (answer.substr(0,1).compare("R") == 0)
+       {
+           return DEVICE_OK;
+       }
+       else if (answer.substr(0, 1).compare("E") == 0 && answer.length() > 2)
+       {
+           int errNo = atoi(answer.substr(2).c_str());
+           ret = ERR_OFFSET + errNo;
+           std::ostringstream os;
+           os << "XYStage::SetRelativePositionSteps GR,x,y response RE got ret code " << ret << ", trying again " << tries << "/" << MAX_TRIES;
+           LogMessage(os.str().c_str());
+           CDeviceUtils::SleepMs(SLEEP_TIME);
+           continue;
+       }
+       else {
+           ret = ERR_UNRECOGNIZED_ANSWER;
+       }
+       std::ostringstream os;
+       os << "XYStage::SetRelativePositionSteps GR,x,y response got unrecognized ret code " << ret << ", trying again " << tries << "/" << MAX_TRIES;
+       LogMessage(os.str().c_str());
+       CDeviceUtils::SleepMs(SLEEP_TIME);
    }
-   else if (answer.substr(0, 1).compare("E") == 0 && answer.length() > 2)
-   {
-      int errNo = atoi(answer.substr(2).c_str());
-      return ERR_OFFSET + errNo;
-   }
-
-   return ERR_UNRECOGNIZED_ANSWER;   
+   return ret;   
 }
 
 int XYStage::GetPositionSteps(long& x, long& y)
